
AVRASM ver. 2.2.8  C:\Users\Chris Q\Documents\Micros\proyectos\Proyecto 1 Micros 22695\Proyecto 1 Micros 22695\main.asm Tue Mar 18 02:52:18 2025

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\Chris Q\Documents\Micros\proyectos\Proyecto 1 Micros 22695\Proyecto 1 Micros 22695\main.asm(11): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.INC'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\Chris Q\Documents\Micros\proyectos\Proyecto 1 Micros 22695\Proyecto 1 Micros 22695\main.asm(11): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\M328PDEF.INC'
                                 
                                 ;UNIVERSIDAD DEL VALLE DE GUATEMALA
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;IE2023: PROGRAMACION DE MICROCONTROLADORES
                                 ;Proyecto1.asm
                                 ;AUTOR: Christian Quelex
                                 ;PROYECTO: Reloj Hora-Fecha-Alarma
                                 ;HARDWARE: ATMEGA328P
                                 
                                 
                                 ;ISR_TIMER0
                                 
                                 .INCLUDE "M328PDEF.INC"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .EQU T1VALUE = 0xE17B
                                 //.EQU STATE_ADDR = 0x0100	// Direccion guarda Data
                                 
                                 .DEF ESTADO = R18
                                 .DEF COUNTER_T0 = R19
                                 .DEF COUNTER = R20
                                 .CSEG
                                 .ORG 0X00
000000 940c 002b                 	JMP SETUP		;RESET VECTOR
                                 .ORG 0X0008			// Interrupciones en los puertos C
000008 940c 0233                 	JMP ISR_PCINT1
                                 .ORG 0X0020
000020 940c 02db                 	JMP ISR_TIMER0	;ISR: TIMER0 VECTOR
                                 
                                 
                                 
                                 
                                 MAIN:
                                 
000022 ef0f                      	LDI		R16, LOW(RAMEND)
000023 bf0d                      	OUT		SPL, R16
000024 e018                      	LDI		R17, HIGH(RAMEND)
000025 bf1e                      	OUT		SPH, R17
                                 
000026 063f
000027 4f5b
000028 6d66
000029 077d
00002a 6f7f                      	SEG: .DB 0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F// ,//0x77,0x7C,0x39,0x5E,0x79,0x71
                                 
                                 SETUP:
                                 
00002b e000                      	LDI		R16, 0x00		// deshabilitar puertos usart
00002c 9300 00c1                 	STS		UCSR0B, R16
                                 	
00002e ef0f                      	LDI		R16, 0xFF		// Salidas puertos D
00002f b90a                      	OUT		DDRD, R16
000030 e000                      	LDI		R16, 0x00
000031 b90b                      	OUT		PORTD, R16
                                 
000032 ef0f                      	LDI		R16, 0xFF
000033 b904                      	OUT		DDRB, R16
                                 	//SBI		DDRB, PB3
                                 	//SBI		DDRB, PB4		// Salidas para multiplexiar 
                                 	//SBI		DDRB, PB5		// Luz a alarma - Buzzer
                                 
000034 ef00                      	LDI		R16, 0xF0		// Entradas Botones
000035 b907                      	OUT		DDRC, R16
000036 e00f                      	LDI		R16, 0x0F
000037 b908                      	OUT		PORTC, R16
                                 
000038 e050                      	LDI		R21, 0				// configuracion de lista
000039 e0f0                      	LDI		ZH, HIGH(SEG << 1)
00003a e4ec                      	LDI		ZL, LOW(SEG << 1)
00003b 0fe5                      	ADD		ZL, R21
00003c 9154                      	LPM		R21, Z
                                 	
00003d e00f                      	LDI		R16, (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11)
00003e 9300 006c                 	STS		PCMSK1, R16 // Puertos C como entras con interrupcion 
                                 
000040 e002                      	LDI		R16, (1 << PCIE1)
000041 9300 0068                 	STS		PCICR, R16	// interrupciones ping change en el puerto C
                                 
000043 940e 02d3                 	CALL	INIT_T0
000045 9478                      	SEI					//Habilitar interrupciones globales
                                 
000046 2722                      	CLR		ESTADO
000047 2733                      	CLR		COUNTER_T0
000048 2744                      	CLR		COUNTER
                                 
                                 	// Modificadores para los digitos
                                 
000049 e000                      	LDI		R16, 0
00004a 9300 0121                 	STS		0x0121, R16			//Display1 Segundos
00004c e005                      	LDI		R16, 5
00004d 9300 0122                 	STS		0x0122, R16			//Display2 Decenas S
00004f e009                      	LDI		R16, 9
000050 9300 0123                 	STS		0x0123, R16			//Display3 Min
000052 e005                      	LDI		R16, 5
000053 9300 0124                 	STS		0x0124, R16			//Display4 Decena M
000055 e003                      	LDI		R16, 3 // 3
000056 9300 0125                 	STS		0x0125, R16			//Display5 Horas
000058 e002                      	LDI		R16, 2
000059 9300 0126                 	STS		0x0126, R16			//Display6 Decenas H
00005b 2700                      	CLR		R16
00005c 9300 0127                 	STS		0x0127, R16			//Estado de display
                                 
                                 	// HORA
00005e 9300 0131                 	STS		0x0131, R16			// DIGITO 1
000060 9300 0132                 	STS		0x0132, R16			// DIGITO 2
000062 9300 0133                 	STS		0x0133, R16			// DIGITO 3
000064 9300 0134                 	STS		0x0134, R16
                                 
                                 	//FECHA
000066 9300 0141                 	STS		0x0141, R16
000068 9300 0142                 	STS		0x0142, R16
00006a 9300 0143                 	STS		0x0143, R16
00006c 9300 0144                 	STS		0x0144, R16
                                 
                                 //	LDI		R20, 0				// Contador de Timer
                                 //	LDI		R21, 0				// Contador de Display
                                 //	LDI		R23, 0				// Contador de Decenas
                                 
                                 LOOP:		//Listado de Estados 
                                 
                                 
                                 	//LDS		R18, STATE_ADDR
00006e 3020                      	CPI		ESTADO, 0
00006f f051                      	BREQ	ESTADO0PASO
000070 3021                      	CPI		ESTADO, 1
000071 f051                      	BREQ	ESTADO1PASO
000072 3022                      	CPI		ESTADO, 2
000073 f089                      	BREQ	ESTADO2PASO
000074 3023                      	CPI		ESTADO, 3
000075 f0b1                      	BREQ	ESTADO3PASO
000076 3024                      	CPI		ESTADO, 4
000077 f0c9                      	BREQ	ESTADO4PASO
000078 3025                      	CPI		ESTADO, 5
000079 f0c9                      	BREQ	ESTADO5PASO
                                 	
                                 	
                                 .if 0
                                 .endif
                                 	//RJMP LOOP
                                 
                                 	// Modificador de Decenas
                                 
                                 
                                 ESTADO0PASO:
00007a 940c 0095                 	JMP		ESTADO0
                                 ESTADO1PASO:
00007c 2700                      	CLR		R16
00007d 9300 0132                 	STS		0x0132, R16		//ESTADO DISPLAY2
00007f 9300 0133                 	STS		0x0133, R16		//ESTADO DISPLAY3
000081 9300 0134                 	STS		0x0134, R16		//ESTADO DISPLAY4
000083 940c 00db                 	JMP		ESTADO1
                                 ESTADO2PASO:
000085 2700                      	CLR		R16
000086 9300 0133                 	STS		0x0133, R16		//ESTADO DISPLAY3
000088 9300 0134                 	STS		0x0134, R16		//ESTADO DISPLAY4
00008a 940c 00ef                 	JMP		ESTADO2
                                 ESTADO3PASO:
00008c 2700                      	CLR		R16
00008d 9300 0134                 	STS		0x0134, R16		//ESTADO DISPLAY4
00008f 940c 0103                 	JMP ESTADO3
                                 
                                 ESTADO4PASO:
000091 940c 0117                 	JMP		ESTADO4
                                 ESTADO5PASO:
000093 940c 012b                 	JMP		ESTADO5
                                 
                                 .if 0
                                 .endif
                                 
                                 ESTADO0:		// Estado Base - Muestra la Hora
                                 
000095 940e 01dd                 	CALL SECONDS_DISPLAYS
                                 	// PRIMER DISPLAY1
000097 940e 01f1                 	CALL CLEAN 
000099 9160 0123                 	LDS R22, 0x0123
00009b 940e 01f6                 	CALL DISPLAY
00009d e002                      	LDI R16, 0x02
00009e b905                      	OUT PORTB, R16		//ENCENCER CIERTO TRANSISTOR
00009f b96b                      	OUT PORTD, R22		//CARGA VALORES DE DISPLAY
                                 	
                                 	//SEGUNDO DISPLAY2
0000a0 940e 01f1                 	CALL CLEAN 
0000a2 9160 0124                 	LDS R22, 0x0124
0000a4 940e 01f6                 	CALL DISPLAY
0000a6 e001                      	LDI R16, 0x01
0000a7 b905                      	OUT PORTB, R16		//ENCENDER CIERTO TRANSISTOR
0000a8 b96b                      	OUT PORTD, R22		//CARGAR VALORES DE DISPLAY
                                 
                                 
                                 	// TERCER DISPLAY HORAS1
0000a9 940e 01f1                 	CALL CLEAN 
0000ab 9160 0125                 	LDS R22, 0x0125
0000ad 940e 01f6                 	CALL DISPLAY
0000af e200                      	LDI R16, 0x20
0000b0 b905                      	OUT PORTB, R16
0000b1 b96b                      	OUT PORTD, R22
                                 
                                 	// CUARTO DISPLAY HORAS2
0000b2 940e 01f1                 	CALL CLEAN
0000b4 9160 0126                 	LDS R22, 0x0126
0000b6 940e 01f6                 	CALL DISPLAY
0000b8 9844                      	CBI PORTC, PC4
0000b9 e100                      	LDI R16, 0x10
0000ba b905                      	OUT PORTB, R16
0000bb b96b                      	OUT PORTD, R22
                                 
                                 
0000bc 940e 01f1                 	CALL CLEAN
0000be e000                      	LDI R16, 0x00
0000bf 9a44                      	SBI PORTC, PC4
0000c0 b905                      	OUT PORTB, R16
0000c1 e766                      	LDI R22, 0b01110110
                                 
0000c2 b96b                      	OUT PORTD, R22
                                 
                                 	//CONTADOR DE SEGUNDOS
                                 
0000c3 3332                      	CPI COUNTER_T0, 50
0000c4 f089                      	BREQ D7
0000c5 3633                      	CPI COUNTER_T0, 99
0000c6 f079                      	BREQ D7
0000c7 3634                      	CPI COUNTER_T0, 100
0000c8 f489                      	BRNE LOOPS0
0000c9 2733                      	CLR COUNTER_T0
0000ca 9a4f                      	SBI PIND, PD7
                                 
                                 	
                                 	//EVALUAR LOS SEGUNDOS
                                 
0000cb 2766                      	CLR R22
0000cc 9160 0121                 	LDS R22, 0x0121
0000ce 9563                      	INC R22
0000cf 9360 0121                 	STS 0x0121, R22
0000d1 306a                      	CPI R22, 10
0000d2 f029                      	BREQ ZEROSP
0000d3 2766                      	CLR R22
0000d4 940c 006e                 	JMP LOOP
                                 
                                 D7:
0000d6 9a4f                      	SBI PIND, PD7
0000d7 cf96                      	RJMP LOOP
                                 
                                 ZEROSP:
0000d8 940c 0171                 	JMP ZEROS
                                 
                                 LOOPS0:
0000da cf93                      	RJMP LOOP 
                                 
                                 // ESTADO 1
                                 
                                 ESTADO1:
0000db 940e 01b3                 	CALL MUX_DISPLAYS
                                 
0000dd 3634                      	CPI COUNTER_T0, 100
0000de f461                      	BRNE LOOPS1
0000df 2733                      	CLR COUNTER_T0
                                 
                                 	//CBI PORTC, PC4
                                 
                                 	// INCREMENTO CAMBIO DE REGISTROS ------------------------------------------------
0000e0 2766                      	CLR R22
0000e1 9160 0121                 	LDS R22, 0x0121
0000e3 9563                      	INC R22
0000e4 9360 0121                 	STS 0x0121, R22
0000e6 306a                      	CPI R22, 10
0000e7 f029                      	BREQ ZEROSP1
0000e8 2766                      	CLR R22
0000e9 940c 006e                 	JMP LOOP
                                 
                                 LOOPS1: 
0000eb 940c 006e                 	JMP LOOP
                                 ZEROSP1:
0000ed 940c 0171                 	JMP ZEROS
                                 
                                 ESTADO2:
0000ef 940e 01b3                 	CALL MUX_DISPLAYS
0000f1 3634                      	CPI COUNTER_T0, 100
0000f2 f461                      	BRNE LOOPS2
0000f3 2733                      	CLR COUNTER_T0
                                 
0000f4 2766                      	CLR R22
0000f5 9160 0121                 	LDS R22, 0x0121
0000f7 9563                      	INC R22
0000f8 9360 0121                 	STS 0x0121, R22
0000fa 306a                      	CPI R22, 10
0000fb f029                      	BREQ ZEROSP2
0000fc 2766                      	CLR R22
0000fd 940c 006e                 	JMP LOOP
                                 LOOPS2:
0000ff 940c 006e                 	JMP LOOP
                                 ZEROSP2: 
000101 940c 0171                 	JMP ZEROS
                                 
                                 
                                 ESTADO3:
000103 940e 01b3                 	CALL MUX_DISPLAYS
000105 3634                      	CPI COUNTER_T0, 100
000106 f461                      	BRNE LOOPS3
000107 2733                      	CLR COUNTER_T0
                                 
000108 2766                      	CLR R22
000109 9160 0121                 	LDS R22, 0x0121
00010b 9563                      	INC R22
00010c 9360 0121                 	STS 0x0121, R22
00010e 306a                      	CPI R22, 10
00010f f029                      	BREQ ZEROSP3
000110 2766                      	CLR R22
000111 940c 006e                 	JMP LOOP
                                 LOOPS3:
000113 940c 006e                 	JMP LOOP
                                 ZEROSP3: 
000115 940c 0171                 	JMP ZEROS
                                 
                                 ESTADO4:
000117 940e 01b3                 	CALL MUX_DISPLAYS
000119 3634                      	CPI COUNTER_T0, 100
00011a f461                      	BRNE LOOPS4
00011b 2733                      	CLR COUNTER_T0
                                 
00011c 2766                      	CLR R22
00011d 9160 0121                 	LDS R22, 0x0121
00011f 9563                      	INC R22
000120 9360 0121                 	STS 0x0121, R22
000122 306a                      	CPI R22, 10
000123 f029                      	BREQ ZEROSP4
000124 2766                      	CLR R22
000125 940c 006e                 	JMP LOOP
                                 LOOPS4:
000127 940c 006e                 	JMP LOOP
                                 ZEROSP4: 
000129 940c 0171                 	JMP ZEROS
                                 
                                 
                                 ESTADO5:
00012b e020                      	LDI ESTADO, 0
00012c 9160 0131                 	LDS R22, 0x0131
00012e 9100 0132                 	LDS R16, 0x0132
000130 2b60                      	OR R22, R16
000131 9100 0133                 	LDS R16, 0x0133
000133 2b60                      	OR R22, R16
000134 9100 0134                 	LDS R16, 0x0134
000136 2b60                      	OR R22, R16
000137 3060                      	CPI R22, 0
000138 f1a1                      	BREQ LOOPS5
                                 
000139 9160 0133                 	LDS R22, 0x0133
00013b 3064                      	CPI R22, 4
00013c f410                      	BRSH RESET_CH
00013d 940e 014c                 	CALL ASSIGN_TIME
                                 
                                 RESET_CH:
00013f 9160 0134                 	LDS R22, 0x0134
000141 3062                      	CPI R22, 2
000142 f011                      	BREQ RST_T
000143 940e 014c                 	CALL ASSIGN_TIME
                                 
                                 RST_T:
000145 2766                      	CLR R22
000146 9360 0133                 	STS 0x0133, R22
000148 9360 0134                 	STS 0x0134, R22
00014a 940e 014c                 	CALL ASSIGN_TIME
                                 
                                 
                                 ASSIGN_TIME:
00014c 9160 0131                 	LDS R22, 0x0131
00014e 9360 0123                 	STS 0x0123, R22
000150 9160 0132                 	LDS R22, 0x0132
000152 9360 0124                 	STS 0x0124, R22
000154 9160 0133                 	LDS R22, 0x0133
000156 9360 0125                 	STS 0x0125, R22
000158 9160 0134                 	LDS R22, 0x0134
00015a 9360 0126                 	STS 0x0126, R22
00015c 2766                      	CLR R22
00015d 940e 01b3                 	CALL MUX_DISPLAYS
                                 
00015f 3634                      	CPI COUNTER_T0, 100
000160 f461                      	BRNE LOOPS5
000161 2733                      	CLR COUNTER_T0
                                 
000162 2766                      	CLR R22
000163 9160 0121                 	LDS R22, 0x0121
000165 9563                      	INC R22
000166 9360 0121                 	STS 0x0121, R22
000168 306a                      	CPI R22, 10
000169 f029                      	BREQ ZEROSP5
00016a 2766                      	CLR R22
00016b 940c 006e                 	JMP LOOP
                                 
                                 LOOPS5:
00016d 940c 006e                 	JMP LOOP
                                 
                                 ZEROSP5:
00016f 940c 0171                 	JMP ZEROS
                                 .if 0
                                 .endif 
                                 
                                 
                                 ZEROS:							// Conador de decenas
000171 e060                      	LDI		R22, 0
000172 9360 0121                 	STS 0x0121, R22
                                 	
000174 9160 0122                 	LDS R22, 0x0122
000176 9563                      	INC R22
000177 9360 0122                 	STS 0x0122, R22
000179 3066                      	CPI R22, 6
00017a f009                      	BREQ SIXS
00017b cef2                      	RJMP LOOP
                                 
                                 SIXS:
00017c e060                      	LDI R22, 0
00017d 9360 0122                 	STS 0x0122, R22
                                 
00017f 9160 0123                 	LDS R22, 0x0123
000181 9563                      	INC R22
000182 9360 0123                 	STS 0x0123, R22
000184 306a                      	CPI R22, 10
000185 f009                      	BREQ ZEROM
000186 cee7                      	RJMP LOOP
                                 
                                 
                                 
                                 ZEROM:							// Conador de decenas
000187 e060                      	LDI		R22, 0
000188 9360 0123                 	STS 0x0123, R22
                                 	
00018a 9160 0124                 	LDS R22, 0x0124
00018c 9563                      	INC R22
00018d 9360 0124                 	STS 0x0124, R22
00018f 3066                      	CPI R22, 6
000190 f009                      	BREQ SIXM
000191 cedc                      	RJMP LOOP
                                 
                                 SIXM:
000192 e060                      	LDI R22, 0
000193 9360 0124                 	STS 0x0124, R22
                                 
000195 9160 0125                 	LDS R22, 0x0125
000197 9563                      	INC R22
000198 9360 0125                 	STS 0x0125, R22
00019a 306a                      	CPI R22, 10
00019b f019                      	BREQ ZEROSH
00019c 3064                      	CPI R22, 4
00019d f051                      	BREQ ENDTIME
00019e cecf                      	RJMP LOOP
                                 
                                 ZEROSH:
00019f e060                      	LDI R22, 0
0001a0 9360 0125                 	STS 0x0125, R22
                                 
0001a2 9160 0126                 	LDS R22, 0x0126
0001a4 9563                      	INC R22
0001a5 9360 0126                 	STS 0x0126, R22
0001a7 cec6                      	RJMP LOOP
                                 
                                 ENDTIME:
                                 
0001a8 9160 0126                 	LDS R22, 0x0126
0001aa ff61                      	SBRS R22, 1
0001ab cec2                      	RJMP LOOP
                                 
0001ac e060                      	LDI R22, 0
0001ad 9360 0125                 	STS 0x0125, R22
0001af e060                      	LDI R22, 0
0001b0 9360 0126                 	STS 0x0126, R22
0001b2 cebb                      	RJMP LOOP
                                 
                                 MUX_DISPLAYS:
0001b3 940e 01dd                 	CALL SECONDS_DISPLAYS
                                 
0001b5 940e 01f1                 	CALL CLEAN 
                                 
0001b7 9160 0131                 	LDS R22, 0x0131
0001b9 940e 01f6                 	CALL DISPLAY
0001bb e002                      	LDI R16, 0x02
0001bc b905                      	OUT PORTB, R16
0001bd b96b                      	OUT PORTD, R22
                                 
0001be 940e 01f1                 	CALL CLEAN 
                                 
0001c0 9160 0132                 	LDS R22, 0x0132
0001c2 940e 01f6                 	CALL DISPLAY
0001c4 e001                      	LDI R16, 0x01
0001c5 b905                      	OUT PORTB, R16
0001c6 b96b                      	OUT PORTD, R22
                                 
0001c7 940e 01f1                 	CALL CLEAN 
                                 
0001c9 9160 0133                 	LDS R22, 0x0133
0001cb 940e 01f6                 	CALL DISPLAY
0001cd e200                      	LDI R16, 0x20
0001ce b905                      	OUT PORTB, R16
0001cf b96b                      	OUT PORTD, R22
                                 
0001d0 940e 01f1                 	CALL CLEAN 
                                 
0001d2 9160 0134                 	LDS R22, 0x0134
0001d4 940e 01f6                 	CALL DISPLAY
0001d6 e100                      	LDI R16, 0x10
0001d7 b905                      	OUT PORTB, R16
0001d8 b96b                      	OUT PORTD, R22
                                 
0001d9 940e 01fb                 	CALL SHOW_STATE_SC
                                 
0001db 9a4f                      	SBI PIND, PD7
0001dc 9508                      	RET
                                 
                                 SECONDS_DISPLAYS:
0001dd 2766                      	CLR R22
                                 
0001de 940e 01f1                 	CALL CLEAN 
0001e0 9160 0121                 	LDS R22, 0x0121
0001e2 940e 01f6                 	CALL DISPLAY
0001e4 e008                      	LDI R16, 0x08
0001e5 b905                      	OUT PORTB, R16
0001e6 b96b                      	OUT PORTD, R22
                                 
                                 
0001e7 940e 01f1                 	CALL CLEAN 
0001e9 9160 0122                 	LDS R22, 0x0122
0001eb 940e 01f6                 	CALL DISPLAY
0001ed e004                      	LDI R16, 0x04
0001ee b905                      	OUT PORTB, R16
0001ef b96b                      	OUT PORTD, R22
0001f0 9508                      	RET
                                 
                                 
                                 CLEAN:
                                 
0001f1 2700                      	CLR R16
0001f2 b905                      	OUT PORTB, R16
0001f3 b90b                      	OUT PORTD, R16
0001f4 9844                      	CBI PORTC, PC4
0001f5 9508                      	RET
                                 
                                 DISPLAY:
                                 
0001f6 e0f0                      	LDI ZH, HIGH(SEG << 1)
0001f7 e4ec                      	LDI ZL, LOW(SEG << 1)
0001f8 0fe6                      	ADD ZL, R22
0001f9 9164                      	LPM R22, Z
0001fa 9508                      	RET
                                 
                                 SHOW_STATE_SC:
0001fb 2700                      	CLR R16
                                 	//CBI PORTB, PB5
0001fc b905                      	OUT PORTB, R16
0001fd b90b                      	OUT PORTD, R16
                                 	//SBI PORTB, PB5
0001fe e000                      	LDI R16, 0x00
0001ff b905                      	OUT PORTB, R16
000200 e66d                      	LDI R22, 0x6D
000201 b96b                      	OUT PORTD, R22
000202 9508                      	RET
                                 
                                 MUX_DISPLAYS_A:
000203 940e 01dd                  	CALL SECONDS_DISPLAYS
                                 
000205 940e 01f1                 	CALL CLEAN 
                                 
000207 9160 0141                 	LDS R22, 0x0141
000209 940e 01f6                 	CALL DISPLAY
00020b e200                      	LDI R16, 0x20
00020c b905                      	OUT PORTB, R16
00020d b96b                      	OUT PORTD, R22
                                 
00020e 940e 01f1                 	CALL CLEAN 
                                 
000210 9160 0142                 	LDS R22, 0x0142
000212 940e 01f6                 	CALL DISPLAY
000214 e100                      	LDI R16, 0x10
000215 b905                      	OUT PORTB, R16
000216 b96b                      	OUT PORTD, R22
                                 
000217 940e 01f1                 	CALL CLEAN 
                                 
000219 9160 0143                 	LDS R22, 0x0143
00021b 940e 01f6                 	CALL DISPLAY
00021d e001                      	LDI R16, 0x01
00021e b905                      	OUT PORTB, R16
00021f b96b                      	OUT PORTD, R22
                                 
000220 940e 01f1                 	CALL CLEAN 
                                 
000222 9160 0144                 	LDS R22, 0x0144
000224 940e 01f6                 	CALL DISPLAY
000226 e002                      	LDI R16, 0x02
000227 b905                      	OUT PORTB, R16
000228 b96b                      	OUT PORTD, R22
                                 
                                 	// ESTADOS DE LOS DISPLAYS
000229 2700                      	CLR R16
                                 	//CBI PORTB, PB5
00022a b905                      	OUT PORTB, R16
00022b b90b                      	OUT PORTD, R16
                                 	//SBI PORTB, PB5
00022c e000                      	LDI R16, 0x00
00022d b905                      	OUT PORTB, R16
00022e e767                      	LDI R22, 0x77
00022f b96b                      	OUT PORTD, R22
000230 2766                      	CLR R22
000231 9a4f                      	SBI PIND, PD7
000232 9508                      	RET
                                 
                                 // INTERRUPCIONES
                                 
                                 // PCINT - INTERRUPCIONES PARA PUERTOS C
                                 
                                 ISR_PCINT1:
000233 930f                      	PUSH R16
000234 b70f                      	IN R16, SREG
000235 930f                      	PUSH R16
                                 
                                 
000236 3020                      	CPI ESTADO, 0
000237 f041                      	BREQ ESTADO0_ISR_P
000238 3021                      	CPI ESTADO, 1
000239 f039                      	BREQ ESTADO1_ISR_P
00023a 3022                      	CPI ESTADO, 2
00023b f031                      	BREQ ESTADO2_ISR_P
00023c 3023                      	CPI ESTADO, 3
00023d f029                      	BREQ ESTADO3_ISR_P
00023e 3024                      	CPI ESTADO, 4
00023f f021                      	BREQ ESTADO4_ISR_P
                                 	//CPI ESTADO, 5
                                 	//BREQ ESTADO5_ISR_P
                                 
                                 .if 0
                                 .endif
                                 ESTADO0_ISR_P:
000240 c004                      	RJMP ESTADO0_ISR
                                 ESTADO1_ISR_P:
000241 c00f                      	RJMP ESTADO1_ISR
                                 ESTADO2_ISR_P:
000242 c02d                      	RJMP ESTADO2_ISR
                                 ESTADO3_ISR_P:
000243 c04c                      	RJMP ESTADO3_ISR
                                 ESTADO4_ISR_P:
000244 c06a                      	RJMP ESTADO4_ISR
                                 
                                 .if 0
                                 .endif 
                                 // ESTADOS DE INTERRUPCIONES 
                                 
                                 ESTADO0_ISR:
                                 
000245 b106                      	IN R16, PINC
000246 ff01                      	SBRS R16, 1
000247 0000                      	NOP
000248 ff02                      	SBRS R16, 2
000249 0000                      	NOP
00024a ff00                      	SBRS R16, 0
00024b 2744                      	CLR COUNTER
00024c ff00                      	SBRS R16, 0
00024d e021                      	LDI ESTADO, 1
00024e ff03                      	SBRS R16, 3
00024f 0000                      	NOP
                                 
000250 c07d                      	RJMP ISR_POP
                                 
                                 
                                 ESTADO1_ISR:
                                 
000251 9340 0131                 	STS 0x0131, COUNTER
000253 3040                      	CPI COUNTER, 0
000254 f061                      	BREQ INF_LIM
                                 
000255 b106                      	IN R16, PINC 
000256 ff02                      	SBRS R16, 2
000257 954a                      	DEC COUNTER
000258 ff01                      	SBRS R16, 1
000259 9543                      	INC COUNTER
                                 
00025a 304a                      	CPI COUNTER, 10
00025b f011                      	BREQ SUP_LIM
00025c 940c 0267                 	JMP END_ISR1
                                 
                                 SUP_LIM:
00025e e040                      	LDI COUNTER, 0
00025f 940c 0267                 	JMP END_ISR1
                                 INF_LIM:
000261 b106                      	IN R16, PINC
000262 ff02                      	SBRS R16, 2
000263 e049                      	LDI COUNTER, 9
000264 ff00                      	SBRS R16, 0
000265 9543                      	INC COUNTER 
000266 c000                      	RJMP END_ISR1
                                 
                                 END_ISR1:
000267 ff00                      	SBRS R16, 0
000268 2744                      	CLR COUNTER
000269 ff00                      	SBRS R16, 0
00026a e022                      	LDI ESTADO, 2
00026b ff03                      	SBRS R16, 3
00026c 2744                      	CLR COUNTER
00026d ff03                      	SBRS R16, 3
00026e e020                      	LDI ESTADO, 0
00026f c05e                      	RJMP ISR_POP
                                 
                                 
                                 ESTADO2_ISR:
                                 
000270 9340 0132                 	STS 0x0132, COUNTER
000272 b106                      	IN R16, PINC
000273 3040                      	CPI COUNTER, 0
000274 f061                      	BREQ INF_LIM_S2
                                 
000275 b106                      	IN R16, PINC 
000276 ff02                      	SBRS R16, 2
000277 954a                      	DEC COUNTER
000278 ff01                      	SBRS R16, 1
000279 9543                      	INC COUNTER
                                 	
00027a 3046                      	CPI COUNTER, 6
00027b f011                      	BREQ SUP_LIM_S2
00027c 940c 0287                 	JMP END_ISR2
                                 
                                 SUP_LIM_S2:
00027e e040                      	LDI COUNTER, 0
00027f 940c 0287                 	JMP END_ISR2
                                 INF_LIM_S2:
000281 b106                      	IN R16, PINC
000282 ff02                      	SBRS R16, 2
000283 e045                      	LDI COUNTER, 5
000284 ff00                      	SBRS R16, 0
000285 9543                      	INC COUNTER 
000286 c000                      	RJMP END_ISR2
                                 
                                 END_ISR2:
000287 ff00                      	SBRS R16, 0
000288 2744                      	CLR COUNTER
000289 ff00                      	SBRS R16, 0
00028a e023                      	LDI ESTADO, 3
00028b ff03                      	SBRS R16, 3
00028c 2744                      	CLR COUNTER
00028d ff03                      	SBRS R16, 3
00028e e021                      	LDI ESTADO, 1
00028f c03e                      	RJMP ISR_POP
                                 
                                 //---------------------------------------------------------
                                 
                                 ESTADO3_ISR:
                                 
000290 9340 0133                 	STS 0x0133, COUNTER
000292 3040                      	CPI COUNTER, 0
000293 f061                      	BREQ INF_LIM3
                                 
000294 b106                      	IN R16, PINC 
000295 ff02                      	SBRS R16, 2
000296 954a                      	DEC COUNTER
000297 ff01                      	SBRS R16, 1
000298 9543                      	INC COUNTER
000299 304a                      	CPI COUNTER, 10
00029a f011                      	BREQ SUP_LIM3
00029b 940c 02a6                 	JMP END_ISR3
                                 
                                 SUP_LIM3:
00029d e040                      	LDI COUNTER, 0
00029e 940c 02a6                 	JMP END_ISR3
                                 INF_LIM3:
0002a0 b106                      	IN R16, PINC
0002a1 ff01                      	SBRS R16, 1
0002a2 e049                      	LDI COUNTER, 9
0002a3 ff00                      	SBRS R16, 0
0002a4 9543                      	INC COUNTER 
0002a5 c000                      	RJMP END_ISR3
                                 
                                 END_ISR3:
0002a6 ff00                      	SBRS R16, 0
0002a7 2744                      	CLR COUNTER
0002a8 ff00                      	SBRS R16, 0
0002a9 e024                      	LDI ESTADO, 4
0002aa ff03                      	SBRS R16, 3
0002ab 2744                      	CLR COUNTER
0002ac ff03                      	SBRS R16, 3
0002ad e022                      	LDI ESTADO, 2
0002ae c01f                      	RJMP ISR_POP
                                 
                                 
                                 //-----------------------------------------------------------
                                 
                                 ESTADO4_ISR:
                                 
0002af 9340 0134                 	STS 0x0134, COUNTER
                                 	//IN R16, PINC
0002b1 3040                      	CPI COUNTER, 0
0002b2 f061                      	BREQ INF_LIM4
                                 
0002b3 b106                      	IN R16, PINC 
0002b4 ff02                      	SBRS R16, 2
0002b5 954a                      	DEC COUNTER
0002b6 ff01                      	SBRS R16, 1
0002b7 9543                      	INC COUNTER
                                 	
0002b8 304a                      	CPI COUNTER, 10
0002b9 f011                      	BREQ SUP_LIM4
0002ba 940c 02c5                 	JMP END_ISR4
                                 
                                 SUP_LIM4:
0002bc e040                      	LDI COUNTER, 0
0002bd 940c 02c5                 	JMP END_ISR4
                                 INF_LIM4:
0002bf b106                      	IN R16, PINC
0002c0 ff01                      	SBRS R16, 1
0002c1 e049                      	LDI COUNTER, 9
0002c2 ff00                      	SBRS R16, 0
0002c3 9543                      	INC COUNTER 
0002c4 c000                      	RJMP END_ISR4
                                 
                                 END_ISR4:
0002c5 ff00                      	SBRS R16, 0
0002c6 2744                      	CLR COUNTER
0002c7 ff00                      	SBRS R16, 0
0002c8 e025                      	LDI ESTADO, 5
0002c9 ff03                      	SBRS R16, 3
0002ca 2744                      	CLR COUNTER
0002cb ff03                      	SBRS R16, 3
0002cc e023                      	LDI ESTADO, 3
0002cd c000                      	RJMP ISR_POP
                                 
                                 
                                 //--------------------------------------------------
                                 .if 0
                                 .endif
                                 
                                 ISR_POP:
0002ce 9ad9                      	SBI PCIFR, PCIF1
0002cf 910f                      	POP R16
0002d0 bf0f                      	OUT SREG, R16
0002d1 910f                      	POP R16
0002d2 9518                      	RETI
                                 
                                 
                                 	// prescaler para timer0 
                                 INIT_T0:
0002d3 e005                      	LDI		R16, (1 << CS02) | (1 << CS00)
0002d4 bd05                      	OUT		TCCR0B, R16		// prescaler de 1024
                                 
0002d5 e603                      	LDI		R16, 99			// valor de overflow
0002d6 bd06                      	OUT		TCNT0, R16		// cargar el valor de overflow
                                 
0002d7 e001                      	LDI		R16, (1 << TOIE0)
0002d8 9300 006e                 	STS		TIMSK0, R16			// habilitar interrupcion
0002da 9508                      	RET
                                 	// Carga de Valores 
                                 ISR_TIMER0:
0002db e603                      	LDI		R16, 99			// valor de timer
0002dc bd06                      	OUT		TCNT0, R16		// cargar valor de overflow
0002dd 9aa8                      	SBI		TIFR0, TOV0		// Apagar bandera
0002de 9533                      	INC		COUNTER_T0				// Incrementar contador cada 10ms
0002df 9518                      	RETI
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 159 r17:   2 r18:  22 r19:  16 r20:  42 
r21:   3 r22: 131 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   4 r31:   2 
Registers used: 10 out of 35 (28.6%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  34 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   6 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  42 cbi   :   2 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  41 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  41 cpse  :   0 dec   :   4 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  11 inc   :  20 jmp   :  34 
ld    :   0 ldd   :   0 ldi   :  70 lds   :  36 lpm   :   4 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   3 or    :   3 ori   :   0 out   :  51 pop   :   2 
push  :   2 rcall :   0 ret   :   7 reti  :   2 rjmp  :  23 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   7 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :  38 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  53 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 27 out of 113 (23.9%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005c0   1406     10   1416   32768   4.3%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
